// Manifest version information!
def versionMajor = 2
def versionMinor = 0
def versionPatch = 10
def versionBuild = totalCommits()
// bump for dogfood builds, public betas, etc.

buildscript {
  repositories {
    maven { url "https://maven.fabric.io/public" }
    google()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$rootProject.deps.androidGradlePlugin"
    classpath "io.fabric.tools:gradle:$rootProject.deps.fabric"
    classpath "com.github.ben-manes:gradle-versions-plugin:$rootProject.deps.gradleVersionsPlugin"
  }
}

repositories {
  maven { url "https://maven.fabric.io/public" }
}

apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply plugin: "com.github.ben-manes.versions"

def totalCommits() {
    def p = 'git rev-list --count HEAD'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim().toInteger()
}

def isCi = "true" == System.getenv("CI")
def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

android {
  compileSdkVersion rootProject.compileSdkVersion
  buildToolsVersion rootProject.buildToolsVersion

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isCi
  }

  defaultConfig {
    minSdkVersion rootProject.minSdkVersion
    targetSdkVersion rootProject.targetSdkVersion

    versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    signingConfig signingConfigs.debug

    vectorDrawables.useSupportLibrary = true

    javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
  }

  signingConfigs {
    release {
      def prop = loadProperties("release-keystore.properties")
      storeFile rootProject.file("release.jks")
      storePassword prop.storePassword
      keyAlias prop.keyAlias
      keyPassword prop.keyPassword
    }
    debug {
      storeFile rootProject.file("debug.keystore")
      storePassword "android"
      keyAlias "android"
      keyPassword "android"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      signingConfig signingConfigs.release
    }
    debug {
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug
    }
  }

  flavorDimensions "version"
  productFlavors {
    internal {
      dimension "version"
      applicationId "org.selfconference.internal"
    }
    production {
      dimension "version"
      applicationId "org.selfconference"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude "META-INF/services/javax.annotation.processing.Processor"
  }

  lintOptions {
    checkReleaseBuilds false
  }

  testOptions.unitTests.all {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }
  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

dependencies {
  implementation "androidx.annotation:annotation:1.0.2"
  implementation "androidx.appcompat:appcompat:1.0.2"
  implementation "androidx.legacy:legacy-support-v4:$rootProject.deps.androidxBase"
  implementation "com.google.android.material:material:$rootProject.deps.androidxBase"
  implementation "androidx.recyclerview:recyclerview:$rootProject.deps.androidxBase"
  implementation "androidx.cardview:cardview:$rootProject.deps.androidxBase"

  annotationProcessor "com.google.auto.value:auto-value:$rootProject.deps.autoValue"
  api "com.google.auto.value:auto-value-annotations:$rootProject.deps.autoValue"
  annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$rootProject.deps.autoValueParcel"
  api "com.ryanharter.auto.value:auto-value-parcel-adapter:$rootProject.deps.autoValueParcel"
  annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$rootProject.deps.autoValueMoshi"
  api "com.ryanharter.auto.value:auto-value-moshi-annotations:$rootProject.deps.autoValueMoshi"
  implementation "com.jakewharton:butterknife:$rootProject.deps.butterknife"
  annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.deps.butterknife"
  implementation "com.jakewharton.timber:timber:$rootProject.deps.timber"
  implementation "com.google.dagger:dagger:$rootProject.deps.dagger2"
  implementation "com.google.dagger:dagger-android:$rootProject.deps.dagger2"
  implementation "com.google.dagger:dagger-android-support:$rootProject.deps.dagger2"
  annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.deps.dagger2"
  annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.deps.dagger2"
  implementation "com.squareup.picasso:picasso:$rootProject.deps.picasso"
  implementation "com.squareup.okhttp3:okhttp:$rootProject.deps.okhttp"
  internalImplementation "com.squareup.okhttp3:logging-interceptor:$rootProject.deps.okhttp"
  implementation "com.squareup.retrofit2:retrofit:$rootProject.deps.retrofit"
  implementation "com.squareup.retrofit2:converter-moshi:$rootProject.deps.retrofit"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.deps.retrofit"
  internalImplementation "com.squareup.retrofit2:retrofit-mock:$rootProject.deps.retrofit"

  implementation 'com.jakewharton.byteunits:byteunits:0.9.1'

  implementation 'de.psdev.licensesdialog:licensesdialog:2.0.0'

  implementation "com.squareup.moshi:moshi:$rootProject.deps.moshi"
  implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.deps.threeTenAbp"

  implementation "com.google.guava:guava:$rootProject.deps.guava"

  implementation "io.reactivex.rxjava2:rxjava:$rootProject.deps.rxJava2"
  implementation "io.reactivex.rxjava2:rxandroid:$rootProject.deps.rxJavaAndroid2"
  implementation "com.f2prateek.rx.preferences2:rx-preferences:$rootProject.deps.rxPreferences2"
  implementation "com.trello.rxlifecycle3:rxlifecycle:$rootProject.deps.rxLifecycle3"
  implementation "com.trello.rxlifecycle3:rxlifecycle-components:$rootProject.deps.rxLifecycle3"

  implementation("com.crashlytics.sdk.android:crashlytics:$rootProject.deps.crashlytics") {
    transitive = true
  }

  debugImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.deps.leakCanary"
  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.deps.leakCanary"

  internalImplementation "com.mattprecious.telescope:telescope:$rootProject.deps.telescope"
  internalImplementation "com.jakewharton:process-phoenix:$rootProject.deps.processPhoenix"

  testImplementation "org.robolectric:robolectric:$rootProject.deps.robolectric"
  testImplementation "junit:junit:$rootProject.deps.junit"
  testImplementation "com.squareup.assertj:assertj-android:$rootProject.deps.assertjAndroid"
  testImplementation 'androidx.test.ext:junit:1.1.0'
}

if (!isCi) {

//  def installAll = tasks.create("installAll")
//  installAll.description = "Install all applications."
//  android.applicationVariants.all { variant ->
//    installAll.dependsOn(variant.install)
//    // Ensure we end up in the same group as the other install tasks.
//    installAll.group = variant.install.group
//  }

}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName("assemble").dependsOn variant.assembleProvider
}

tasks.withType(JavaCompile) {
  options.deprecation = true
}

Properties loadProperties(String filename) {
  Properties properties = new Properties()
  if (rootProject.file(filename).exists()) {
    properties.load(new FileInputStream(rootProject.file(filename)))
  }
  return properties
}
